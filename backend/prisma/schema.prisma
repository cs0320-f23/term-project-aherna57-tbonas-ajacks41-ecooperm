generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id                 Int                  @id @default(autoincrement())
  name               String
  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
  restaurants        Restaurant[]
  id                 Int                  @id @default(autoincrement())
  name               String
  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
  restaurants        Restaurant[]
  RestaurantCategory RestaurantCategory[]
}

model Restaurant {
  id                 String               @id @default(cuid())
  name               String
  address            String
  latitude           Float
  longitude          Float
  description        String
  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
  userId             String?
  imageUrl           String
  menuUrl            String?
  openingHours       String?
  phone              String?
  priceCategory      Int
  rating             Float?
  categories         Category[]
  RestaurantCategory RestaurantCategory[]
  Review             Review[]
  User               User?                @relation(fields: [userId], references: [id])
}

model RestaurantCategory {
  restaurantId String
  categoryId   Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  category     Category   @relation(fields: [categoryId], references: [id])

  @@id([restaurantId, categoryId])
}

model Review {
  id           String     @id @default(cuid())
  id           String     @id @default(cuid())
  restaurantId String
  title        String
  description  String
  rating       Int
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  userId       String?
  imageUrl     String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  User         User?      @relation(fields: [userId], references: [id])
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  firstName         String
  lastName          String
  profilePictureURL String
  updatedAt         DateTime     @updatedAt
  createdAt         DateTime     @default(now())
  reviews           Review[]
  favorites         Restaurant[]
}

model CategoryToRestaurant {
  A Int
  B String

  @@unique([A, B], map: "_CategoryToRestaurant_AB_unique")
  @@index([B], map: "_CategoryToRestaurant_B_index")
  @@map("_CategoryToRestaurant")
}

model CategoryToRestaurant {
  A Int
  B String

  @@unique([A, B], map: "_CategoryToRestaurant_AB_unique")
  @@index([B], map: "_CategoryToRestaurant_B_index")
  @@map("_CategoryToRestaurant")
}
